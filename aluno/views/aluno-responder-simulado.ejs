<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Responder Simulado</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      http-equiv="Cache-Control"
      content="no-store, no-cache, must-revalidate, proxy-revalidate"
    />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <link rel="stylesheet" href="/assets/theme-d32f8eb8.css" />
    <style>
      /* Conteúdo principal */
      main {
        max-width: 800px;
      }
      footer {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: #fff;
        border-top: 1px solid #ccc;
        padding: 20px;
      }
      .question-card {
        margin-bottom: 20px;
      }
      .alternative-container {
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
      }
      .alternative-toggle.alternative-selected {
        background-color: rgb(79 70 229 / var(--tw-bg-opacity));
        color: white;
      }
      .question-index {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        background-color: #f1f1f1;
        border-radius: 4px;
        margin-right: 10px;
      }
      footer .nav-buttons {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
      }
      /* Botão habilitado */
      .btn-enabled {
        padding: 0.5rem 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-align: center;
        border: 1px solid #2563eb;
        background-color: #2563eb;
        color: #fff;
        border-radius: 0.375rem;
        transition: background-color 0.5s, border-color 0.5s;
      }
      .btn-enabled:hover {
        background-color: #1d4ed8;
        border-color: #1d4ed8;
      }
      /* Botão desabilitado */
      .btn-disabled {
        padding: 0.5rem 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-align: center;
        border: 1px solid #d1d5db;
        background-color: #d1d5db;
        color: #6b7280;
        border-radius: 0.375rem;
      }
      .alternative-toggle {
        flex-shrink: 0;
      }
      .alternative-text {
        padding-left: 10px;
        flex-grow: 1;
      }
      /* Sidebar fixa no lado direito */
      .sidebar {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        width: 200px;
        background: #f8f9fa;
        border-left: 1px solid #ccc;
        padding: 20px;
        overflow-y: auto;
      }
      .sidebar h3 {
        margin-top: 0;
        margin-bottom: 10px;
      }
      /* Container do mapa de questões alinhado horizontalmente */
      .sidebar .question-map {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }
      .sidebar .question-map div {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
      }
      .sidebar .question-map div.answered {
        background-color: #28a745;
        color: #fff;
      }
      /* Timer */
      #timer {
        text-align: center;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <!-- Elemento oculto para passar o total de questões -->
    <div
      id="simuladoData"
      data-total="<%= totalRows %>"
      style="display: none"
    ></div>

    <!-- Sidebar fixa no lado direito para o mapa de questões e formulário de encerramento -->
    <div class="sidebar">
      <h3>Mapa de Questões</h3>
      <div class="question-map">
        <% questoes.forEach(function(q, index) { %>
        <div data-question="<%= index + 1 %>" data-question-id="<%= q.id %>">
          <%= index + 1 %>
        </div>
        <% }); %>
      </div>
      <div style="margin-top: 20px; text-align: center">
        <!-- Formulário para encerrar o simulado via POST -->
        <form
          id="encerrarSimuladoForm"
          method="POST"
          action="/aluno/encerrar-simulado/<%= simulado.id %>"
        >
          <!-- Campo oculto para enviar as respostas -->
          <input type="hidden" name="answers" id="answersInput" value="" />
          <button
            type="submit"
            id="submitBtn"
            class="btn-disabled"
            style="width: 100%"
            disabled
          >
            Encerrar simulado
          </button>
        </form>
      </div>
    </div>

    <div class="min-h-screen flex flex-col lg:ps-64 w-full">
      <main class="p-1 space-y-1">
        <!-- Exibição do timer persistente -->
        <div id="timer">Tempo restante: --:--:--</div>
        <div class="container">
          <% if (questoes && questoes.length > 0) { %> <% var questao =
          questoes[currentPage - 1]; %>
          <div
            class="question-card card-simulado shadow rounded-lg bg-white dark:bg-default-50 border"
          >
            <header class="d-flex align-items-baseline px-3 py-3">
              <div class="d-flex align-items-center">
                <div class="question-index"><%= currentPage %></div>
              </div>
            </header>
            <div class="px-3 pb-3">
              <div class="mt-2">
                <div class="font-size-2"><%- questao.enunciado %></div>
                <div class="d-flex flex-column mt-3">
                  <% var alternativas = { A: questao.alternativa_a, B:
                  questao.alternativa_b, C: questao.alternativa_c, D:
                  questao.alternativa_d, E: questao.alternativa_e }; %> <%
                  Object.keys(alternativas).forEach(function(key) { %> <% if
                  (alternativas[key]) { %>
                  <div
                    class="alternative-container p-3 my-2"
                    data-questao="<%= questao.id %>"
                  >
                    <div
                      class="alternative-toggle text-center font-weight-bold"
                      data-alternative="<%= key %>"
                      style="
                        font-weight: bold;
                        width: 40px;
                        height: 40px;
                        line-height: 40px;
                        border: 1.5px solid
                          hsl(
                            var(--twc-primary) /
                              var(--twc-primary-opacity, var(--tw-bg-opacity))
                          );
                        border-radius: 50%;
                      "
                    >
                      <%= key %>
                    </div>
                    <div class="alternative-text"><%= alternativas[key] %></div>
                  </div>
                  <% } %> <% }); %>
                </div>
              </div>
            </div>
          </div>
          <% } else { %>
          <div class="text-center text-base text-gray-700">
            Nenhuma questão encontrada.
          </div>
          <% } %>
        </div>
      </main>
      <!-- Footer com navegação -->
      <footer>
        <div class="nav-buttons">
          <% if (currentPage > 1) { %>
          <button
            type="button"
            class="btn-custom"
            onclick="window.location.href='/aluno/responder-simulado/<%= simulado.id %>?page=<%= currentPage - 1 %>'"
          >
            Anterior
          </button>
          <% } else { %>
          <button type="button" class="btn-custom" disabled>Anterior</button>
          <% } %> <% if (currentPage < totalPages) { %>
          <button
            type="button"
            class="btn-custom"
            onclick="window.location.href='/aluno/responder-simulado/<%= simulado.id %>?page=<%= currentPage + 1 %>'"
          >
            Próxima
          </button>
          <% } else { %>
          <button type="button" class="btn-custom" disabled>Próxima</button>
          <% } %>
        </div>
      </footer>
    </div>
  </body>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Variáveis necessárias: ID do simulado, do aluno.
    var simuladoId = "<%= simulado.id %>";
    var alunoId = "<%= aluno.id %>";
    // Recupera o total de questões a partir do elemento oculto.
    var totalQuestions = Number(
      document.getElementById("simuladoData").getAttribute("data-total")
    );

    // --- Função para coletar todas as respostas do localStorage ---
    function collectAllAnswers() {
      var answersObj = {};
      var prefix = "aluno_" + alunoId + "_simulado_" + simuladoId + "_questao_";
      for (var i = 0; i < localStorage.length; i++) {
        var key = localStorage.key(i);
        if (key.indexOf(prefix) === 0) {
          var qId = key.substring(prefix.length);
          var answer = localStorage.getItem(key);
          if (answer) {
            answersObj[qId] = answer;
          }
        }
      }
      return answersObj;
    }

    // --- Função para atualizar o estado do botão de submit ---
    function updateSubmitButton() {
      var answersObj = collectAllAnswers();
      var answeredCount = Object.keys(answersObj).length;
      var submitBtn = document.getElementById("submitBtn");
      if (answeredCount === totalQuestions) {
        submitBtn.disabled = false;
        submitBtn.className = "btn-enabled";
      } else {
        submitBtn.disabled = true;
        submitBtn.className = "btn-disabled";
      }
    }

    // --- Timer persistente ---
    var examTimeInSeconds = Number("<%= simulado.tempo_prova %>");
    var globalStartTime = "<%= simulado.inicio_prova %>"
      ? new Date("<%= simulado.inicio_prova %>").getTime()
      : null;
    var storedStartTime;
    var storedStartTimeKey =
      "aluno_" + alunoId + "_simulado_start_time_" + simuladoId;
    if (globalStartTime) {
      storedStartTime = globalStartTime;
    } else {
      storedStartTime = localStorage.getItem(storedStartTimeKey);
      if (!storedStartTime) {
        storedStartTime = Date.now();
        localStorage.setItem(storedStartTimeKey, storedStartTime);
      } else {
        storedStartTime = parseInt(storedStartTime, 10);
      }
    }
    function formatTime(seconds) {
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds % 3600) / 60);
      var s = seconds % 60;
      return (
        (h < 10 ? "0" : "") +
        h +
        ":" +
        (m < 10 ? "0" : "") +
        m +
        ":" +
        (s < 10 ? "0" : "") +
        s
      );
    }
    var timerElement = document.getElementById("timer");
    function updateTimer() {
      var elapsedSeconds = Math.floor((Date.now() - storedStartTime) / 1000);
      var timeLeft = examTimeInSeconds - elapsedSeconds;
      timerElement.innerHTML = "Tempo restante: " + formatTime(timeLeft);
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        // Em vez de alert(), usa SweetAlert2
        Swal.fire({
          title: "Tempo esgotado",
          text: "O tempo acabou! Simulado encerrado.",
          icon: "warning",
          confirmButtonColor: "#2563eb",
          confirmButtonText: "Ok",
        }).then(() => {
          localStorage.removeItem(storedStartTimeKey);
          var answersObj = collectAllAnswers();
          document.getElementById("answersInput").value =
            JSON.stringify(answersObj);
          var timeoutInput = document.createElement("input");
          timeoutInput.type = "hidden";
          timeoutInput.name = "timeout";
          timeoutInput.value = "true";
          document
            .getElementById("encerrarSimuladoForm")
            .appendChild(timeoutInput);
          document.getElementById("encerrarSimuladoForm").submit();
        });
      }
    }
    var timerInterval = setInterval(updateTimer, 1000);
    updateTimer();

    // --- Função para restaurar a seleção de alternativas ---
    function restoreAlternatives() {
      document
        .querySelectorAll(".alternative-container")
        .forEach(function (container) {
          var qId = container.getAttribute("data-questao");
          var key =
            "aluno_" + alunoId + "_simulado_" + simuladoId + "_questao_" + qId;
          var saved = localStorage.getItem(key);
          if (saved) {
            container
              .querySelectorAll(".alternative-toggle")
              .forEach(function (elem) {
                elem.classList.remove("alternative-selected");
              });
            var selected = container.querySelector(
              '.alternative-toggle[data-alternative="' + saved + '"]'
            );
            if (selected) {
              selected.classList.add("alternative-selected");
            }
          }
        });
      markAnsweredQuestions();
      updateSubmitButton();
    }

    // --- Seleção de alternativas ---
    document.querySelectorAll(".alternative-container").forEach(function (el) {
      el.addEventListener("click", function () {
        var currentQuestao = el.getAttribute("data-questao");
        document
          .querySelectorAll(
            '.alternative-container[data-questao="' +
              currentQuestao +
              '"] .alternative-toggle'
          )
          .forEach(function (sibling) {
            sibling.classList.remove("alternative-selected");
          });
        var toggle = el.querySelector(".alternative-toggle");
        toggle.classList.add("alternative-selected");
        var alternative = toggle.getAttribute("data-alternative");
        var key =
          "aluno_" +
          alunoId +
          "_simulado_" +
          simuladoId +
          "_questao_" +
          currentQuestao;
        localStorage.setItem(key, alternative);
        markAnsweredQuestions();
        updateSubmitButton();
      });
    });

    window.addEventListener("load", restoreAlternatives);
    window.addEventListener("pageshow", restoreAlternatives);

    // --- Função para marcar as questões respondidas no mapa (na sidebar) ---
    function markAnsweredQuestions() {
      document
        .querySelectorAll(".sidebar .question-map div")
        .forEach(function (el) {
          var qId = el.getAttribute("data-question-id");
          var key =
            "aluno_" + alunoId + "_simulado_" + simuladoId + "_questao_" + qId;
          if (localStorage.getItem(key) !== null) {
            el.classList.add("answered");
          } else {
            el.classList.remove("answered");
          }
        });
    }

    // --- Listener único para o submit do formulário com confirmação do SweetAlert2 ---
    document
      .getElementById("encerrarSimuladoForm")
      .addEventListener("submit", function (e) {
        e.preventDefault();
        var answersObj = collectAllAnswers();
        document.getElementById("answersInput").value =
          JSON.stringify(answersObj);

        Swal.fire({
          title: "Tem certeza?",
          text: "Ao encerrar, não será possível voltar atrás!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#2563eb",
          cancelButtonColor: "#d33",
          confirmButtonText: "Sim, encerrar simulado",
        }).then((result) => {
          if (result.isConfirmed) {
            // Se confirmado, envia o formulário
            e.target.submit();
          }
        });
      });

    // --- Navega para a questão correspondente ao clicar no item da sidebar ---
    document
      .querySelectorAll(".sidebar .question-map div")
      .forEach(function (el) {
        el.addEventListener("click", function () {
          const questionNum = el.getAttribute("data-question");
          window.location.href =
            "/aluno/responder-simulado/<%= simulado.id %>?page=" + questionNum;
        });
      });
  </script>
</html>
