<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Responder Simulado</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      http-equiv="Cache-Control"
      content="no-store, no-cache, must-revalidate, proxy-revalidate"
    />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <link rel="stylesheet" href="/assets/theme-d32f8eb8.css" />
    <style>
      /* Conteúdo principal */
      main,
      .container,
      .question-card {
        max-width: 900px !important;
      }
      /* 2) Dá um max-height para o card e habilita scroll vertical interno */
      .question-card {
        max-height: 80vh; /* até 80% da altura da viewport */
        overflow-y: auto; /* scroll vertical se ultrapassar */
        padding-right: 1rem; /* um espacinho extra se aparecer barra de scroll */
      }

      /* 3) (Opcional) Aumenta o padding no container para dar mais respiro */
      .container {
        padding-bottom: 2rem;
      }
      footer {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: #fff;
        border-top: 1px solid #ccc;
        padding: 20px;
      }
      .question-card {
        margin-bottom: 20px;
      }
      .alternative-container {
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
      }
      .alternative-toggle.alternative-selected {
        background-color: rgb(79 70 229 / var(--tw-bg-opacity));
        color: #fff;
      }
      .question-index {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        background: #f1f1f1;
        border-radius: 4px;
        margin-right: 10px;
      }
      footer .nav-buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
      }
      .btn-enabled {
        padding: 0.5rem 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-align: center;
        border: 1px solid #2563eb;
        background: #2563eb;
        color: #fff;
        border-radius: 0.375rem;
        transition: background-color 0.5s, border-color 0.5s;
      }
      .btn-enabled:hover {
        background: #1d4ed8;
        border-color: #1d4ed8;
      }
      .btn-disabled {
        padding: 0.5rem 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-align: center;
        border: 1px solid #d1d5db;
        background: #d1d5db;
        color: #6b7280;
        border-radius: 0.375rem;
      }
      .alternative-toggle {
        flex-shrink: 0;
      }
      .alternative-text {
        padding-left: 10px;
        flex-grow: 1;
      }

      /* Sidebar colapsável */
      .sidebar-wrapper {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        width: 200px;
        transition: transform 0.3s ease;
        z-index: 1000;
      }
      .sidebar-wrapper.collapsed {
        transform: translateX(180px);
      }
      .sidebar {
        height: 100%;
        background: #f8f9fa;
        border-left: 1px solid #ccc;
        padding: 20px;
        overflow-y: auto;
      }
      .sidebar h3 {
        margin: 0 0 10px;
      }
      .question-map {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }
      .question-map div {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
      }
      .question-map div.answered {
        background: #28a745;
        color: #fff;
      }
      .sidebar-toggle {
        position: absolute;
        top: 50%;
        left: -20px;
        transform: translateY(-50%);
        width: 20px;
        height: 60px;
        background: #4f46e5;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;
      }
      .sidebar-toggle:hover {
        background: #4338ca;
      }

      /* Timer */
      #timer {
        text-align: center;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 20px;
      }

      /* Overlay de início */
      #startOverlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 2000;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    </style>
  </head>
  <body>
    <!-- Overlay inicial -->
    <div id="startOverlay">
      <button
        id="startBtn"
        class="btn-enabled"
        style="font-size: 1.25rem; padding: 1rem 2rem"
      >
        Iniciar Simulado
      </button>
    </div>

    <!-- Dados ocultos -->
    <div
      id="simuladoData"
      data-total="<%= totalRows %>"
      data-time="<%= simulado.tempo_prova %>"
      style="display: none"
    ></div>

    <!-- Sidebar -->
    <div class="sidebar-wrapper" id="sidebarWrapper">
      <div class="sidebar-toggle" id="sidebarToggle">
        <span id="toggleIcon">❱</span>
      </div>
      <div class="sidebar">
        <h3>Mapa de Questões</h3>
        <div class="question-map">
          <% questoes.forEach(function(q,index){ %>
          <div data-question="<%= index+1 %>" data-question-id="<%= q.id %>">
            <%= index+1 %>
          </div>
          <% }); %>
        </div>
        <div style="margin-top: 20px; text-align: center">
          <form
            id="encerrarSimuladoForm"
            method="POST"
            action="/aluno/encerrar-simulado/<%=simulado.id%>"
          >
            <input type="hidden" name="answers" id="answersInput" value="" />
            <button
              type="submit"
              id="submitBtn"
              class="btn-disabled"
              style="width: 100%"
              disabled
            >
              Encerrar simulado
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Timer fixo fora do SPA -->
    <div id="timer">Tempo restante: --:--:--</div>

    <!-- Container Principal (será substituído via AJAX) -->
    <div id="app" class="min-h-screen flex flex-col lg:ps-64 w-full">
      <main class="p-1 space-y-1">
        <div class="container">
          <% if (questoes && questoes.length > 0) { var questao =
          questoes[currentPage-1]; %>
          <div
            class="question-card card-simulado shadow rounded-lg bg-white dark:bg-default-50 border"
          >
            <header class="d-flex align-items-baseline px-3 py-3">
              <div class="question-index"><%=currentPage%></div>
            </header>
            <div class="px-3 pb-3">
              <div class="mt-2">
                <div class="font-size-2"><%- questao.enunciado %></div>
                <div class="d-flex flex-column mt-3">
                  <% var alts = { A: questao.alternativa_a, B:
                  questao.alternativa_b, C: questao.alternativa_c, D:
                  questao.alternativa_d, E: questao.alternativa_e };
                  Object.keys(alts).forEach(function(key) { if (alts[key]) { %>
                  <div
                    class="alternative-container p-3 my-2"
                    data-questao="<%= questao.id %>"
                  >
                    <div
                      class="alternative-toggle text-center font-weight-bold"
                      data-alternative="<%= key %>"
                      style="
                        font-weight: bold;
                        width: 40px;
                        height: 40px;
                        line-height: 40px;
                        border: 1.5px solid
                          hsl(var(--twc-primary) / var(--tw-bg-opacity));
                        border-radius: 50%;
                      "
                    >
                      <%= key %>
                    </div>
                    <div class="alternative-text"><%= alts[key] %></div>
                  </div>
                  <% } }); %>
                </div>
              </div>
            </div>
          </div>
          <% } else { %>
          <div class="text-center text-base text-gray-700">
            Nenhuma questão encontrada.
          </div>
          <% } %>
        </div>
      </main>

      <footer>
        <div class="nav-buttons">
          <% if (currentPage > 1) { %>
          <button
            type="button"
            class="btn-custom btn-disabled"
            data-url="/aluno/responder-simulado/<%= simulado.id %>?page=<%= currentPage-1 %>"
            disabled
          >
            Anterior
          </button>
          <% } else { %>
          <button type="button" class="btn-custom btn-disabled" disabled>
            Anterior
          </button>
          <% } %> <% if (currentPage < totalPages) { %>
          <button
            type="button"
            class="btn-custom btn-disabled"
            data-url="/aluno/responder-simulado/<%= simulado.id %>?page=<%= currentPage+1 %>"
            disabled
          >
            Próxima
          </button>
          <% } else { %>
          <button type="button" class="btn-custom btn-disabled" disabled>
            Próxima
          </button>
          <% } %>
        </div>
      </footer>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      // Controle de encerramento
      let examEnded = false;

      // IDs e chaves
      const simuladoId = "<%= simulado.id %>";
      const alunoId = "<%= aluno.id %>";
      const overlayKey = `overlayShown_${alunoId}_${simuladoId}`;
      const totalQuestions = Number(
        document.getElementById("simuladoData").dataset.total
      );

      // Utilitário: converte "HH:MM:SS" ou segundos em número de segundos
      function timeStringToSeconds(t) {
        if (!t) return 0;
        if (t.includes(":")) {
          const [h, m, s] = t.split(":").map((n) => parseInt(n, 10));
          return (
            (isNaN(h) ? 0 : h * 3600) +
            (isNaN(m) ? 0 : m * 60) +
            (isNaN(s) ? 0 : s)
          );
        }
        const secs = parseInt(t, 10);
        return isNaN(secs) ? 0 : secs;
      }

      // Lê do DOM o tempo da prova no formato "HH:MM:SS"
      const simuladoTimeStr =
        document.getElementById("simuladoData").dataset.time;
      const examTimeInSeconds = timeStringToSeconds(simuladoTimeStr);

      // 1) TIMER
      function initTimer() {
        const startKey = `aluno_${alunoId}_simulado_start_time_${simuladoId}`;
        let startStamp = localStorage.getItem(startKey);
        if (!startStamp) {
          startStamp = Date.now();
          localStorage.setItem(startKey, startStamp);
        }

        function formatTime(sec) {
          const hh = Math.floor(sec / 3600),
            mm = Math.floor((sec % 3600) / 60),
            ss = sec % 60;
          return (
            `${hh.toString().padStart(2, "0")}:` +
            `${mm.toString().padStart(2, "0")}:` +
            `${ss.toString().padStart(2, "0")}`
          );
        }

        function updateTimer() {
          const elapsed = Math.floor((Date.now() - startStamp) / 1000),
            left = examTimeInSeconds - elapsed;

          // Atualiza o display
          document.getElementById("timer").textContent =
            "Tempo restante: " + formatTime(left);

          if (left <= 0) {
            clearInterval(window.timerInterval);

            Swal.fire({
              title: "Tempo esgotado",
              text: "O tempo acabou! Simulado encerrado.",
              icon: "warning",
              confirmButtonColor: "#07318c",
              confirmButtonText: "Ok",
              allowOutsideClick: false,
              allowEscapeKey: false,
            }).then((result) => {
              if (result.isConfirmed) {
                examEnded = true;
                localStorage.removeItem(startKey);

                // Preenche as respostas
                document.getElementById("answersInput").value = JSON.stringify(
                  collectAllAnswers()
                );

                // Adiciona campo timeout
                const timeoutInput = document.createElement("input");
                timeoutInput.type = "hidden";
                timeoutInput.name = "timeout";
                timeoutInput.value = "true";
                document
                  .getElementById("encerrarSimuladoForm")
                  .appendChild(timeoutInput);

                // Envia o formulário para /aluno/encerrar-simulado/:id
                document.getElementById("encerrarSimuladoForm").submit();
              }
            });
          }
        }

        // inicia o loop
        updateTimer();
        window.timerInterval = setInterval(updateTimer, 1000);
      }

      // dispara o timer somente uma vez
      initTimer();

      // 2) AJAX / SPA
      const app = document.getElementById("app");

      function fetchPage(url, addToHistory = true) {
        fetch(url, { credentials: "include" })
          .then((r) => r.text())
          .then((html) => {
            const mainMatch = html.match(/<main[\s\S]*?<\/main>/);
            const footerMatch = html.match(/<footer[\s\S]*?<\/footer>/);
            if (mainMatch && footerMatch) {
              app.innerHTML = mainMatch[0] + footerMatch[0];
              bindAll();
            }
            if (addToHistory) history.pushState({ url }, "", url);
          })
          .catch(console.error);
      }

      function bindNavButtons() {
        document
          .querySelectorAll(".nav-buttons button[data-url]")
          .forEach((btn) => {
            btn.disabled = false;
            btn.classList.replace("btn-disabled", "btn-enabled");
            btn.onclick = (e) => {
              e.preventDefault();
              fetchPage(btn.dataset.url);
            };
          });
      }

      function bindMapNavigation() {
        document
          .querySelectorAll(".sidebar .question-map div")
          .forEach((el) => {
            el.onclick = () =>
              fetchPage(
                `/aluno/responder-simulado/${simuladoId}?page=${el.dataset.question}`
              );
          });
      }

      function bindAlternativeClicks() {
        document.querySelectorAll(".alternative-container").forEach((c) => {
          c.onclick = () => {
            const q = c.dataset.questao;

            // 1️⃣ limpa qualquer seleção pré-existente dessa questão
            document
              .querySelectorAll(
                `.alternative-container[data-questao="${q}"] .alternative-toggle`
              )
              .forEach((el) => el.classList.remove("alternative-selected"));

            // 2️⃣ marca só a alternativa clicada
            const tog = c.querySelector(".alternative-toggle");
            tog.classList.add("alternative-selected");

            // 3️⃣ guarda no localStorage
            localStorage.setItem(
              `aluno_${alunoId}_simulado_${simuladoId}_questao_${q}`,
              tog.dataset.alternative
            );
            markAnsweredQuestions();
            updateSubmitButton();
          };
        });
      }

      function bindAll() {
        bindNavButtons();
        bindMapNavigation();
        bindAlternativeClicks();
        restoreAlternatives();
        markAnsweredQuestions();
        updateSubmitButton();
      }

      window.addEventListener("popstate", (e) => {
        if (e.state && e.state.url) fetchPage(e.state.url, false);
      });

      // inicializa ligações
      bindAll();

      // 3) FULLSCREEN & OVERLAY
      const overlay = document.getElementById("startOverlay");
      if (localStorage.getItem(overlayKey)) overlay.style.display = "none";

      function enterFullScreenMode() {
        const elem = document.documentElement;
        if (elem.requestFullscreen) elem.requestFullscreen().catch(() => {});
        else if (elem.mozRequestFullScreen) elem.mozRequestFullScreen();
        else if (elem.webkitRequestFullscreen) elem.webkitRequestFullscreen();
        else if (elem.msRequestFullscreen) elem.msRequestFullscreen();
      }

      function showBlocker() {
        if (sessionStorage.getItem("skipBlocker") === "true") {
          sessionStorage.removeItem("skipBlocker");
          return;
        }
        if (document.getElementById("fsBlocker")) return;
        const div = document.createElement("div");
        div.id = "fsBlocker";
        Object.assign(div.style, {
          position: "fixed",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%",
          background: "rgba(255,255,255,0.95)",
          zIndex: "9999",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column",
          fontSize: "1.2rem",
        });
        div.innerHTML = `
          <p>Você saiu do modo tela cheia!<br>Para continuar, clique abaixo:</p>
          <button id="reenterFsBtn" style="padding:.8rem 1.5rem;font-size:1rem;">
            Voltar à Tela Cheia
          </button>
        `;
        document.body.appendChild(div);
        document
          .getElementById("reenterFsBtn")
          .addEventListener("click", () => {
            enterFullScreenMode();
            document.body.removeChild(div);
          });
      }

      ["fullscreenchange", "webkitfullscreenchange"].forEach((ev) =>
        document.addEventListener(ev, () => {
          if (!document.fullscreenElement && !examEnded) {
            showBlocker();
          }
        })
      );

      document.getElementById("startBtn").addEventListener("click", () => {
        enterFullScreenMode();
        localStorage.setItem(overlayKey, "true");
        overlay.style.display = "none";
      });

      ["load", "pageshow"].forEach((evt) =>
        window.addEventListener(evt, () => {
          if (sessionStorage.getItem("skipBlocker") === "true") {
            sessionStorage.removeItem("skipBlocker");
            enterFullScreenMode();
            return;
          }
          if (
            localStorage.getItem(overlayKey) === "true" &&
            !document.fullscreenElement &&
            !examEnded
          ) {
            showBlocker();
          }
        })
      );

      // 4) SIDEBAR COLLAPSE
      const sidebarWrapper = document.getElementById("sidebarWrapper"),
        sidebarToggle = document.getElementById("sidebarToggle"),
        toggleIcon = document.getElementById("toggleIcon");
      let collapsed = localStorage.getItem("sidebarCollapsed") === "true";
      if (collapsed) {
        sidebarWrapper.classList.add("collapsed");
        toggleIcon.textContent = "❰";
      }
      sidebarToggle.addEventListener("click", () => {
        collapsed = !collapsed;
        sidebarWrapper.classList.toggle("collapsed", collapsed);
        toggleIcon.textContent = collapsed ? "❰" : "❱";
        localStorage.setItem("sidebarCollapsed", collapsed);
      });

      // 5) STORAGE CLEANUP
      (function clearIfNew() {
        const key = `aluno_${alunoId}_simulado_id`,
          stored = localStorage.getItem(key);
        if (stored !== simuladoId) {
          Object.keys(localStorage).forEach((k) => {
            if (k.startsWith(`aluno_${alunoId}_simulado_`))
              localStorage.removeItem(k);
          });
          localStorage.setItem(key, simuladoId);
        }
      })();

      // 6) ANSWERS & UI UPDATE
      function collectAllAnswers() {
        const ans = {},
          prefix = `aluno_${alunoId}_simulado_${simuladoId}_questao_`;
        document
          .querySelectorAll(".sidebar .question-map div")
          .forEach((el) => {
            const qId = el.dataset.questionId;
            ans[qId] = localStorage.getItem(prefix + qId) || "";
          });
        return ans;
      }

      function updateSubmitButton() {
        const count = Object.keys(collectAllAnswers()).length,
          btn = document.getElementById("submitBtn");
        btn.disabled = count !== totalQuestions;
        btn.className = btn.disabled ? "btn-disabled" : "btn-enabled";
      }

      function restoreAlternatives() {
        document.querySelectorAll(".alternative-container").forEach((c) => {
          const qId = c.dataset.questao,
            saved = localStorage.getItem(
              `aluno_${alunoId}_simulado_${simuladoId}_questao_${qId}`
            );
          c.querySelectorAll(".alternative-toggle").forEach((el) =>
            el.classList.remove("alternative-selected")
          );
          if (saved) {
            const sel = c.querySelector(
              `.alternative-toggle[data-alternative="${saved}"]`
            );
            if (sel) sel.classList.add("alternative-selected");
          }
        });
      }

      function markAnsweredQuestions() {
        document
          .querySelectorAll(".sidebar .question-map div")
          .forEach((el) => {
            const key = `aluno_${alunoId}_simulado_${simuladoId}_questao_${el.dataset.questionId}`;
            el.classList.toggle("answered", localStorage.getItem(key) !== null);
          });
      }

      window.addEventListener("load", () => {
        restoreAlternatives();
        markAnsweredQuestions();
        updateSubmitButton();
      });

      // 7) SUBMIT FORM
      document
        .getElementById("encerrarSimuladoForm")
        .addEventListener("submit", (e) => {
          e.preventDefault();
          const answers = collectAllAnswers(),
            cnt = Object.keys(answers).length;
          document.getElementById("answersInput").value =
            JSON.stringify(answers);
          if (cnt < totalQuestions) {
            Swal.fire({
              title: "Atenção!",
              text: "Você precisa responder todas as questões para encerrar o simulado.",
              icon: "warning",
              confirmButtonColor: "#2563eb",
              confirmButtonText: "Ok",
            });
            return;
          }
          Swal.fire({
            title: "Tem certeza?",
            text: "Ao encerrar, não será possível voltar atrás!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#2563eb",
            cancelButtonColor: "#d33",
            confirmButtonText: "Sim, encerrar simulado",
          }).then((result) => {
            if (result.isConfirmed) {
              examEnded = true;
              e.target.submit();
            }
          });
        });

      // 8) LEGACY PREV/NEXT
      document.querySelectorAll(".btn-prev, .btn-next").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          enterFullScreenMode();
          window.location.href = btn.dataset.target;
        });
      });
    </script>
  </body>
</html>
