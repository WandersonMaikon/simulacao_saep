<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Dashboard - Análise Geral</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Choices.js CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
    <!-- ApexCharts -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <link rel="shortcut icon" href="/assets/favicon-8fd74f43.ico" />
    <script
      type="module"
      crossorigin
      src="../assets/theme-e4584917.js"
    ></script>
    <!-- CSS personalizado -->
    <link rel="stylesheet" href="/assets/theme-d32f8eb8.css" />
    <style>
      body {
        background-color: #f0f0f0;
        color: #000;
      }
      /* Força o fundo branco para os componentes gerados pelo Choices.js */
      .choices__inner {
        background-color: white;
      }
      .title {
        font-size: 2rem;
        font-weight: bold;
      }
      .card-custom {
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        background-color: #fff;
        padding: 1.5rem;
        margin-bottom: 2rem;
      }
      /* Layout dos gráficos – conforme definido */
      #donut_chart,
      #bar_chart {
        min-height: 287px;
      }
      #student_chart {
        min-height: 350px;
      }
      #simulado_chart {
        min-height: 365px;
      }
      #simulado_chart_interval {
        font-size: 1.1rem;
        color: #333;
      }
      /* Estilo dos selects e labels */
      .w-full {
        width: 100%;
      }
      .mb-2 {
        margin-bottom: 0.5rem;
      }
      .form-label {
        font-weight: 500;
        font-size: 0.8125rem;
        color: #6B7280;
      }
      .form-select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.375rem;
        background-color: #fff;
      }
      /* Botão Filtrar */
      .btn-filtrar {
        padding: 0.5rem 1.25rem;
        font-size: 0.875rem;
        font-weight: 600;
        border: 1px solid transparent;
        text-align: center;
        cursor: pointer;
        background-color: #2563eb;
        color: #fff;
        border-radius: 0.375rem;
        transition: background-color 0.5s, border-color 0.5s;
      }
      .btn-filtrar:hover {
        background-color: #1d4ed8;
        border-color: #1d4ed8;
      }
      /* Agrupamento dos filtros */
      .filter-inline {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        align-items: flex-end;
      }
      .filter-inline > div {
        flex: 1;
        min-width: 200px;
      }
    </style>
  </head>
  <body>
    <!-- Inclusão do Sidebar -->
    <%- include('partials/sidebar') %>

    <div class="min-h-screen flex flex-col lg:ps-64 w-full">
      <!-- Inclusão do Header -->
      <%- include('partials/header') %>

      <!-- Conteúdo principal -->
      <div class="container my-5">
        <!-- Formulário de Filtro (Curso e Turma) -->
        <div class="mb-4">
          <form method="GET" action="/admin/dashboard">
            <div class="filter-inline">
              <!-- Campo Curso -->
              <div class="w-full">
                <div class="mb-2">
                  <label for="curso" class="form-label">Selecione o Curso</label>
                </div>
                <select class="form-select" name="curso" id="curso" required>
                  <option value="">-- Escolha um Curso --</option>
                  <% cursos.forEach(cursoItem => { %>
                    <option value="<%= cursoItem.id %>" <% if(cursoFiltro == cursoItem.id){ %> selected <% } %>>
                      <%= cursoItem.nome %>
                    </option>
                  <% }); %>
                </select>
              </div>
              <!-- Campo Turma -->
              <div class="w-full">
                <div class="mb-2">
                  <label for="turma" class="form-label">Selecione a Turma</label>
                </div>
                <select class="form-select" name="turma" id="turma" required>
                  <option value="">-- Escolha uma Turma --</option>
                  <% if(turmaFiltro && turmas && turmas.length > 0){ %>
                    <% turmas.forEach(turmaItem => { %>
                      <option value="<%= turmaItem.id %>" <% if(turmaFiltro == turmaItem.id){ %> selected <% } %>>
                        <%= turmaItem.nome %>
                      </option>
                    <% }); %>
                  <% } %>
                </select>
              </div>
              <!-- Botão Filtrar -->
              <div>
                <button type="submit" class="btn-filtrar">Filtrar</button>
              </div>
            </div>
          </form>
        </div>

        <!-- Título da Página -->
        <h2 class="title mb-3">Análise Geral</h2>

        <!-- Card com o Gráfico de Simulados -->
        <% if(cursoFiltro) { %>
          <div class="card-custom chart-card">
            <div class="card-header">
              <h5>Desempenho dos Simulados</h5>
            </div>
            <div class="card-body">
              <!-- Filtro Semanal -->
              <div class="mb-3">
                <div>
                  <label for="start-week" class="text-default-800 text-sm font-medium inline-block mb-2">Semana de Início</label>
                  <input class="block w-full rounded py-2.5 px-4 border-default-200 text-default-800 text-sm focus:ring-transparent" id="start-week" type="week" name="start-week">
                </div>
                <div>
                  <label for="end-week" class="text-default-800 text-sm font-medium inline-block mb-2 mt-2">Semana de Fim</label>
                  <input class="block w-full rounded py-2.5 px-4 border-default-200 text-default-800 text-sm focus:ring-transparent" id="end-week" type="week" name="end-week">
                </div>
                <button id="apply-week-filter" class="btn btn-secondary mt-2">Aplicar Filtro Semanal</button>
              </div>
              <!-- Intervalo Selecionado -->
              <div id="simulado_chart_interval" style="text-align: center; font-weight: bold; margin-bottom: 10px;"></div>
              <!-- Container do Gráfico -->
              <div id="simulado_chart"></div>
              <!-- Legenda abaixo do gráfico -->
              <div style="text-align: center; margin-top: 10px; font-weight: bold;">
                Número do Simulado
              </div>
            </div>
            
          </div>
        <% } %>

        <!-- Container oculto para os dados dos gráficos -->
        <div id="chart-data" data-simulados='<%= JSON.stringify(performanceData.simuladosData || []) %>'></div>
        
      </div>

      <%- include('partials/footer') %>
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Choices.js JS -->
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        var cursoSelect = document.getElementById('curso');
        var turmaSelect = document.getElementById('turma');

        // Inicializa o Choices.js para os selects
        var cursoChoices = new Choices(cursoSelect, {
          searchEnabled: true,
          itemSelectText: '',
          shouldSort: false
        });
        var turmaChoices = new Choices(turmaSelect, {
          searchEnabled: true,
          itemSelectText: '',
          shouldSort: false
        });

        // Função para carregar turmas via AJAX com base no curso selecionado.
        function loadTurmas() {
          var cursoId = cursoSelect.value;
          if (!cursoId) {
            turmaChoices.clearChoices();
            turmaChoices.setChoices(
              [{ value: "", label: "-- Escolha uma Turma --", selected: false, disabled: false }],
              'value',
              'label',
              false
            );
            turmaSelect.value = "";
            return;
          }
          turmaChoices.clearChoices();
          turmaChoices.setChoices(
            [{ value: "", label: "Carregando turmas...", selected: false, disabled: true }],
            'value',
            'label',
            false
          );
  
          fetch(`/admin/turmas/by-curso/${cursoId}`)
            .then(response => response.json())
            .then(data => {
              if (data.turmas && data.turmas.length > 0) {
                var options = data.turmas.map(function(turma, index) {
                  return { 
                    value: turma.id, 
                    label: turma.nome, 
                    selected: (index === 0), 
                    disabled: false 
                  };
                });
                turmaChoices.clearChoices();
                turmaChoices.setChoices(options, 'value', 'label', true);
                // Define o valor do select nativo para a primeira turma retornada
                turmaSelect.value = data.turmas[0].id;
                turmaChoices.setChoiceByValue(turmaSelect.value);
              } else {
                turmaChoices.clearChoices();
                turmaChoices.setChoices(
                  [{ value: "", label: "Nenhuma turma encontrada", selected: false, disabled: true }],
                  'value',
                  'label',
                  false
                );
                turmaSelect.value = "";
              }
            })
            .catch(error => {
              console.error("Erro ao carregar turmas:", error);
              turmaChoices.clearChoices();
              turmaChoices.setChoices(
                [{ value: "", label: "Erro ao carregar turmas", selected: false, disabled: true }],
                'value',
                'label',
                false
              );
              turmaSelect.value = "";
            });
        }
        
        cursoSelect.addEventListener("change", loadTurmas);

        // Renderização do gráfico combinado (Line & Column)
        var cursoFiltro = "<%= cursoFiltro %>";
        if (cursoFiltro) {
          var dataEl = document.getElementById("chart-data");
          var simuladosData = JSON.parse(dataEl.getAttribute("data-simulados"));

          // Preparando as categorias de forma segura
          var simuladosDescriptions = simuladosData.map(function(item) {
            if (item && item.descricao && item.descricao.trim().length > 0)
              return item.descricao;
            else if (item && item.id)
              return String(item.id);
            else
              return "";
          });
          // Cálculo da média das notas para cada simulado
          var simuladosAverages = simuladosData.map(function(item) {
            if (item && item.tentativas && item.tentativas.length > 0) {
              var soma = item.tentativas.reduce(function(acc, cur) {
                return acc + Number(cur.nota);
              }, 0);
              return Number((soma / item.tentativas.length).toFixed(2));
            } else if (item && item.media != null) {
              return Number(item.media);
            } else {
              return 0;
            }
          });
    
          function getISOWeekString(dateStr) {
            var d = new Date(dateStr);
            var day = d.getDay() || 7;
            d.setDate(d.getDate() + 4 - day);
            var yearStart = new Date(d.getFullYear(), 0, 1);
            var weekNo = Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
            return d.getFullYear() + "-W" + ("0" + weekNo).slice(-2);
          }
    
          function renderSimuladosChart(dataArray, intervalText) {
            var simuladosDescriptions = dataArray.map(function(item) {
              if (item && item.descricao && item.descricao.trim().length > 0)
                return item.descricao;
              else if (item && item.id)
                return String(item.id);
              else
                return "";
            });
            var simuladosAverages = dataArray.map(function(item) {
              if (item && item.tentativas && item.tentativas.length > 0) {
                var soma = item.tentativas.reduce(function(acc, cur) {
                  return acc + Number(cur.nota);
                }, 0);
                return Number((soma / item.tentativas.length).toFixed(2));
              } else if (item && item.media != null) {
                return Number(item.media);
              } else {
                return 0;
              }
            });
    
            document.getElementById("simulado_chart_interval").innerHTML = intervalText || "Todos os dados";
    
            var simuladosChartOptions = {
              chart: {
                height: 365,
                type: 'line',  // Tipo base para gráfico misto
                stacked: false,
                events: {
                  dataPointSelection: function(event, chartContext, config) {
                    var index = config.dataPointIndex;
                    var simulado = dataArray[index];
                    if (simulado && simulado.id) {
                      window.location.href = "/admin/simulados/" + simulado.id;
                    }
                  }
                }
              },
              stroke: {
                width: [0, 4] // Coluna sem stroke; linha com stroke de largura 4
              },
              plotOptions: {
                bar: {
                  columnWidth: "55%",
                  endingShape: "rounded"
                }
              },
              // Séries: mantém a coluna existente e acrescenta a série do tipo line (com os mesmos valores)
              series: [
                { 
                  name: "Nota Média",
                  type: "column",
                  data: simuladosAverages
                },
                { 
                  name: "Linha da média",  // Esta série representa a média das notas
                  type: "line",
                  data: simuladosAverages
                }
              ],
              xaxis: {
                categories: simuladosDescriptions,
                labels: {
                  formatter: function(val) {
                    if (!val) return "";
                    return val.length > 20 ? val.substring(0, 20) + "…" : val;
                  }
                }
              },
              title: {
                text: "Média das Notas dos Simulados",
                align: "center"
              },
              yaxis: [{
                title: { text: "Valor média notas" }
              }, {
                opposite: true,
                title: { text: "Linha da Média" }
              }],
              dataLabels: {
                enabled: true,
                enabledOnSeries: [1],
                formatter: function(val, opts) {
                  return String(val);
                },
                background: {
                  enabled: true,
                  foreColor: '#fff',
                  borderRadius: 2,
                  padding: 4
                },
                offsetY: -10
              },
              tooltip: {
                custom: function({ series, seriesIndex, dataPointIndex }) {
                  var simulado = dataArray[dataPointIndex];
                  var avg = series[0][dataPointIndex];
                  var count = (simulado && simulado.tentativas && simulado.tentativas.length > 0) 
                              ? simulado.tentativas.length 
                              : (simulado && simulado.total_alunos ? simulado.total_alunos : 0);
                  var descricao = (simulado && simulado.descricao && simulado.descricao.trim().length > 0)
                                  ? simulado.descricao : (simulado && simulado.id ? simulado.id : "");
                  return (
                    '<div class="arrow_box" style="padding: 8px; background: #fff; border: 1px solid #ccc;">' +
                      "<strong>Nota média da turma:</strong> " + avg + "<br>" +
                      "<strong>Quantidade de alunos:</strong> " + count + "<br>" +
                      "<strong>Descrição:</strong> " + descricao +
                    "</div>"
                  );
                }
              },
              // Habilita a legenda para permitir a interação (toggle das séries)
              legend: { show: true }
            };
    
            if (window.simuladosChart) {
              window.simuladosChart.destroy();
            }
            window.simuladosChart = new ApexCharts(document.querySelector("#simulado_chart"), simuladosChartOptions);
            window.simuladosChart.render();
          }
    
          renderSimuladosChart(simuladosData, "Todos os dados");
    
          document.getElementById("apply-week-filter").addEventListener("click", function() {
            var startWeek = document.getElementById("start-week").value;
            var endWeek = document.getElementById("end-week").value;
            if (!startWeek || !endWeek) {
              alert("Por favor, selecione a semana de início e a semana de fim.");
              return;
            }
            var filteredData = simuladosData.filter(function(item) {
              if (!item.data_criacao) return false;
              var simuladoWeek = getISOWeekString(item.data_criacao);
              return simuladoWeek >= startWeek && simuladoWeek <= endWeek;
            });
            var intervalText = "Dados do intervalo: " + startWeek + " até " + endWeek;
            renderSimuladosChart(filteredData, intervalText);
          });
        }
      });
    </script>
  </body>
</html>
