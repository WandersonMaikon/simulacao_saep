<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="utf-8" />
    <title>Lista de Simulados</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="assets/favicon-8fd74f43.ico" />
    <script type="module" crossorigin src="assets/theme-e4584917.js"></script>
    <link rel="stylesheet" href="assets/theme-d32f8eb8.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      .modal-overlay {
        z-index: 9999;
      }
      .swal2-container {
        z-index: 100000 !important;
      }
      /* Bloco de edição inline oculto */
      #edit-section {
        display: none;
      }
      /* Estilo para o switch checkbox */
      .switch {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 20px;
      }
      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 20px;
      }
      .slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
      }
      input:checked + .slider {
        background-color: #10b981; /* verde */
      }
      input:checked + .slider:before {
        transform: translateX(20px);
      }
    </style>
  </head>
  <body>
    <%- include('partials/sidebar') %>
    <div class="min-h-screen flex flex-col lg:ps-64 w-full">
      <%- include('partials/header') %>
      <div class="p-6 space-y-6">
        <!-- Título e Área de busca -->
        <div class="flex items-center justify-between w-full print:hidden">
          <h4 class="text-lg font-semibold text-default-900">
            Lista de Simulados
          </h4>
        </div>
        <!-- Cartão com total de Simulados -->
        <div class="grid lg:grid-cols-4 md:grid-cols-2 grid-cols-1 gap-6">
          <div class="shadow rounded-lg bg-white dark:bg-default-50">
            <div class="p-5">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-base font-semibold text-default-600">
                    Total de Simulados
                  </p>
                  <h4 class="text-2xl font-semibold text-default-900 mt-4">
                    <%= totalRows %>
                  </h4>
                </div>
                <span
                  class="shrink h-18 w-18 inline-flex items-center justify-center rounded-lg bg-primary/20 text-primary"
                >
                  <i class="ph ph-calendar text-4xl"></i>
                </span>
              </div>
            </div>
          </div>
        </div>
        <!-- Área de busca e link para cadastrar simulado -->
        <div class="flex flex-wrap items-center justify-between py-4 px-5">
          <div class="relative flex">
            <input
              type="search"
              class="ps-12 pe-4 py-2.5 block lg:w-64 border-none bg-default-100 text-default-700 rounded-lg text-sm focus:border-primary focus:ring-primary"
              placeholder="Procurar simulado..."
            />
            <span class="absolute start-4 top-2.5">
              <i
                class="ph-duotone ph-magnifying-glass text-lg text-default-600"
              ></i>
            </span>
          </div>
          <a
            href="/cadastrar-simulado-steps"
            class="py-2 px-4 inline-flex items-center justify-center font-semibold tracking-wide text-xs bg-primary hover:bg-primary-500 text-white rounded"
          >
            <i class="ph-duotone ph-plus-circle text-lg/none me-3"></i>
            Adicionar Simulado
          </a>
        </div>
        <!-- Tabela de Simulados -->
        <div class="shadow rounded-lg bg-white dark:bg-default-50 h-fit">
          <div
            class="border-t border-dashed border-default-200 relative overflow-x-auto"
          >
            <table class="min-w-full">
              <thead class="border-b border-dashed border-default-200">
                <tr>
                  <th class="px-6 py-3 text-left text-sm font-semibold">Id</th>
                  <th class="px-6 py-3 text-left text-sm font-semibold">
                    Descrição
                  </th>
                  <th class="px-6 py-3 text-left text-sm font-semibold">
                    Curso
                  </th>
                  <th class="px-6 py-3 text-left text-sm font-semibold">
                    Turma
                  </th>

                  <th class="px-6 py-3 text-left text-sm font-semibold">
                    Tempo de prova
                  </th>
                  <th class="px-6 py-3 text-center text-sm font-semibold">
                    Ativar simulado
                  </th>
                  <th class="px-3 py-3 text-center text-sm font-semibold">
                    Ação
                  </th>
                </tr>
              </thead>
              <tbody class="divide-y divide-dashed divide-default-200">
                <% if (simulados && simulados.length > 0) { %> <%
                simulados.forEach(function(simulado) { %>
                <tr>
                  <td class="px-6 py-3"><%= simulado.id %></td>
                  <td class="px-6 py-3"><%= simulado.descricao %></td>
                  <td class="px-6 py-3"><%= simulado.curso_nome %></td>
                  <td class="px-6 py-3"><%= simulado.turma %></td>
                  <td class="px-6 py-3"><%= simulado.tempo_prova %></td>
                  <td class="px-6 py-3 text-center">
                    <label class="switch">
                      <input type="checkbox" class="ativar-simulado"
                      data-id="<%= simulado.id %>" <%= simulado.ativa == 1 ?
                      "checked disabled" : "" %>>
                      <span class="slider"></span>
                    </label>
                  </td>

                  <td class="px-3 py-3 text-center">
                    <div class="flex items-center justify-center gap-2">
                      <button
                        class="deletar-simulado inline-flex items-center justify-center h-8 w-8 rounded-md bg-red-500/20 text-red-500 transition-all duration-200 hover:bg-red-500 hover:text-white"
                        data-identificador="<%= simulado.id %>"
                      >
                        <i class="ph-duotone ph-trash text-base"></i>
                      </button>
                    </div>
                  </td>
                </tr>
                <% }); %> <% } else { %>
                <tr>
                  <td colspan="8" class="text-center py-6">
                    Nenhum simulado cadastrado.
                  </td>
                </tr>
                <% } %>
              </tbody>
            </table>
          </div>
          <!-- Paginação -->
          <div
            class="flex items-center justify-between py-3 px-6 border-t border-dashed border-default-200"
          >
            <h6 class="text-default-600">
              Mostrando <%= (currentPage - 1) * 10 + 1 %> a <%= (currentPage *
              10 > totalRows ? totalRows : currentPage * 10) %> de <%= totalRows
              %>
            </h6>
            <nav class="flex items-center gap-1">
              <% if (currentPage > 1) { %>
              <a
                class="inline-flex items-center justify-center h-8 w-8 border rounded-md transition-all duration-200 hover:bg-primary hover:text-white"
                href="/simulados?page=<%= currentPage - 1 %>"
              >
                <i class="ph ph-caret-left text-base"></i>
              </a>
              <% } %> <% for (let i = 1; i <= totalPages; i++) { %>
              <a
                class="inline-flex items-center justify-center h-8 w-8 border rounded-md transition-all duration-200 <%= currentPage === i ? 'bg-primary text-white' : 'hover:bg-primary hover:text-white' %>"
                href="/simulados?page=<%= i %>"
              >
                <%= i %>
              </a>
              <% } %> <% if (currentPage < totalPages) { %>
              <a
                class="inline-flex items-center justify-center h-8 w-8 border rounded-md transition-all duration-200 hover:bg-primary hover:text-white"
                href="/simulados?page=<%= currentPage + 1 %>"
              >
                <i class="ph ph-caret-right text-base"></i>
              </a>
              <% } %>
            </nav>
          </div>
        </div>
      </div>
      <%- include('partials/footer') %>
    </div>
  </body>
  <script>
    $(document).ready(function () {
      // Variáveis globais
      var currentIndex = 0;
      var fieldsets = $("form fieldset");
      var totalSteps = fieldsets.length; // 5 etapas
      var allAlunos = [];
      var currentPageAlunos = 1;
      var itemsPerPage = 10;
      var selectedAlunosIds = [];
      var allQuestoes = [];
      var currentPageQuestoes = 1;
      var itemsPerPageQuestoes = 10;
      var selectedQuestoesIds = [];

      // Função para renderizar alunos
      function renderAlunosPage() {
        var tbody = $("#aluno-table-body");
        tbody.empty();
        var startIndex = (currentPageAlunos - 1) * itemsPerPage;
        var endIndex = startIndex + itemsPerPage;
        var alunosPage = allAlunos.slice(startIndex, endIndex);
        if (alunosPage.length > 0) {
          alunosPage.forEach(function (aluno) {
            var dataStr = aluno.data_cadastro || "";
            var dataObj = new Date(dataStr);
            if (isNaN(dataObj.getTime())) {
              dataObj = new Date(dataStr.replace(/-/g, "/"));
            }
            var dataFormatada = dataObj.getTime()
              ? dataObj.toLocaleString("pt-BR")
              : "";
            var checked =
              selectedAlunosIds.indexOf(aluno.id.toString()) !== -1
                ? "checked"
                : "";
            tbody.append(`
              <tr>
                <td class="px-6 py-3">
                  <input type="checkbox" name="alunos[]" value="${
                    aluno.id
                  }" class="form-checkbox aluno-checkbox" ${checked}>
                </td>
                <td class="px-6 py-3">${aluno.id}</td>
                <td class="px-6 py-3">${aluno.nome}</td>
                <td class="px-6 py-3">${aluno.usuario || ""}</td>
              </tr>
            `);
          });
        } else {
          tbody.append(`
            <tr>
              <td colspan="7" class="text-center py-6">Nenhum aluno cadastrado nesta turma.</td>
            </tr>
          `);
        }
        renderPagination();
      }

      function renderPagination() {
        var totalPages = Math.ceil(allAlunos.length / itemsPerPage);
        var paginationHtml = "";
        for (var i = 1; i <= totalPages; i++) {
          if (i === currentPageAlunos) {
            paginationHtml += `<span class="px-3 py-1 bg-primary text-white rounded">${i}</span>`;
          } else {
            paginationHtml += `<a href="#" class="pagination-link px-3 py-1 bg-default-100 text-default-700 rounded" data-page="${i}">${i}</a>`;
          }
        }
        $("#aluno-pagination").html(paginationHtml);
      }

      $(document).on("click", ".pagination-link", function (e) {
        e.preventDefault();
        currentPageAlunos = parseInt($(this).data("page"));
        renderAlunosPage();
      });

      $("#select-all-alunos").on("change", function () {
        var checked = $(this).prop("checked");
        selectedAlunosIds = checked
          ? allAlunos.map(function (aluno) {
              return aluno.id.toString();
            })
          : [];
        $("#aluno-table-body .aluno-checkbox").prop("checked", checked);
      });

      $(document).on("change", ".aluno-checkbox", function () {
        var alunoId = $(this).val();
        if ($(this).prop("checked")) {
          if (selectedAlunosIds.indexOf(alunoId) === -1) {
            selectedAlunosIds.push(alunoId);
          }
        } else {
          selectedAlunosIds = selectedAlunosIds.filter(function (id) {
            return id !== alunoId;
          });
          $("#select-all-alunos").prop("checked", false);
        }
      });

      // Busca alunos via AJAX ao alterar a turma
      $("#select-turma").on("change", function () {
        var turmaId = $(this).val();
        console.log("Turma selecionada:", turmaId);
        if (!turmaId) {
          $("#aluno-table-body").html(`
            <tr>
              <td colspan="4" class="text-center py-6">Nenhum aluno cadastrado nesta turma.</td>
            </tr>
          `);
          $("#aluno-pagination").empty();
          return;
        }
        $.ajax({
          url: "/alunos-por-turma/" + turmaId,
          type: "GET",
          dataType: "json",
          success: function (data) {
            console.log("Resposta de alunos:", data);
            allAlunos = data;
            currentPageAlunos = 1;
            renderAlunosPage();
            if ($("#select-all-alunos").prop("checked")) {
              selectedAlunosIds = allAlunos.map(function (aluno) {
                return aluno.id.toString();
              });
            }
          },
          error: function () {
            Swal.fire({
              icon: "error",
              title: "Erro",
              text: "Erro ao buscar alunos.",
            });
          },
        });
      });

      // Função para renderizar questões
      function renderQuestoesPage() {
        var tbody = $("#questao-table-body");
        tbody.empty();
        var startIndex = (currentPageQuestoes - 1) * itemsPerPageQuestoes;
        var endIndex = startIndex + itemsPerPageQuestoes;
        var questoesPage = allQuestoes.slice(startIndex, endIndex);
        if (questoesPage.length > 0) {
          questoesPage.forEach(function (questao) {
            var checked =
              selectedQuestoesIds.indexOf(questao.id.toString()) !== -1
                ? "checked"
                : "";
            tbody.append(`
              <tr>
                <td class="px-6 py-3">
                  <input type="checkbox" name="questoes[]" value="${questao.id}" class="form-checkbox questao-checkbox" ${checked}>
                </td>
                <td class="px-6 py-3">${questao.id}</td>
                <td class="px-6 py-3">${questao.titulo}</td>
                <td class="px-6 py-3">${questao.curso}</td>
                <td class="px-6 py-3">${questao.materia}</td>
                <td class="px-6 py-3">${questao.enunciado}</td>
              </tr>
            `);
          });
        } else {
          tbody.append(`
            <tr>
              <td colspan="6" class="text-center py-6">Nenhuma questão encontrada.</td>
            </tr>
          `);
        }
        renderQuestoesPagination();
      }

      function renderQuestoesPagination() {
        var totalPages = Math.ceil(allQuestoes.length / itemsPerPageQuestoes);
        var paginationHtml = "";
        for (var i = 1; i <= totalPages; i++) {
          if (i === currentPageQuestoes) {
            paginationHtml += `<span class="px-3 py-1 bg-primary text-white rounded">${i}</span>`;
          } else {
            paginationHtml += `<a href="#" class="pagination-link-questao px-3 py-1 bg-default-100 text-default-700 rounded" data-page="${i}">${i}</a>`;
          }
        }
        $("#questao-pagination").html(paginationHtml);
      }

      $(document).on("click", ".pagination-link-questao", function (e) {
        e.preventDefault();
        currentPageQuestoes = parseInt($(this).data("page"));
        renderQuestoesPage();
      });

      $("#select-all-questoes").on("change", function () {
        var checked = $(this).prop("checked");
        selectedQuestoesIds = checked
          ? allQuestoes.map(function (questao) {
              return questao.id.toString();
            })
          : [];
        $("#questao-table-body .questao-checkbox").prop("checked", checked);
      });

      $(document).on("change", ".questao-checkbox", function () {
        var questaoId = $(this).val();
        if ($(this).prop("checked")) {
          if (selectedQuestoesIds.indexOf(questaoId) === -1) {
            selectedQuestoesIds.push(questaoId);
          }
        } else {
          selectedQuestoesIds = selectedQuestoesIds.filter(function (id) {
            return id !== questaoId;
          });
          $("#select-all-questoes").prop("checked", false);
        }
      });

      // Busca questões via AJAX – chamada ao entrar na Etapa 4
      function fetchQuestoes() {
        var cursoId = $("#select-curso").val();
        if (!cursoId) {
          console.error("Curso não selecionado.");
          return;
        }
        $.ajax({
          url: "/questoes-por-curso/" + cursoId,
          type: "GET",
          dataType: "json",
          success: function (data) {
            console.log("Resposta de questões:", data);
            allQuestoes = data;
            currentPageQuestoes = 1;
            renderQuestoesPage();
          },
          error: function () {
            Swal.fire({
              icon: "error",
              title: "Erro",
              text: "Erro ao buscar questões.",
            });
          },
        });
      }

      $("#questao-search").on("keyup", function () {
        var query = $(this).val().toLowerCase();
        $("#questao-table-body tr").each(function () {
          var idText = $(this).find("td:nth-child(2)").text().toLowerCase();
          var tituloText = $(this).find("td:nth-child(3)").text().toLowerCase();
          var cursoText = $(this).find("td:nth-child(4)").text().toLowerCase();
          var materiaText = $(this)
            .find("td:nth-child(5)")
            .text()
            .toLowerCase();
          var enunciadoText = $(this)
            .find("td:nth-child(6)")
            .text()
            .toLowerCase();
          if (
            idText.indexOf(query) > -1 ||
            tituloText.indexOf(query) > -1 ||
            cursoText.indexOf(query) > -1 ||
            materiaText.indexOf(query) > -1 ||
            enunciadoText.indexOf(query) > -1
          ) {
            $(this).show();
          } else {
            $(this).hide();
          }
        });
      });

      // Atualiza o resumo final na Etapa 5
      function updateReviewFinal() {
        var cursoText = $("#select-curso option:selected").text();
        var turmaText = $("#select-turma option:selected").text();
        var selectedAlunos = allAlunos.filter(function (aluno) {
          return selectedAlunosIds.indexOf(aluno.id.toString()) !== -1;
        });
        var alunosText = selectedAlunos
          .map(function (aluno) {
            return aluno.nome;
          })
          .join(", ");
        var selectedQuestoes = allQuestoes.filter(function (questao) {
          return selectedQuestoesIds.indexOf(questao.id.toString()) !== -1;
        });
        var questoesText = selectedQuestoes
          .map(function (questao) {
            return questao.titulo;
          })
          .join(", ");

        $("#resumo-final-curso").text(cursoText);
        $("#resumo-final-turma").text(turmaText);
        $("#resumo-final-alunos").text(
          alunosText || "Nenhum aluno selecionado"
        );
        $("#resumo-final-questoes").text(
          questoesText || "Nenhuma questão selecionada"
        );
      }

      // Exibe a etapa atual e atualiza a barra de progresso
      function showStep(index) {
        fieldsets.removeClass("active");
        fieldsets.eq(index).addClass("active");
        var percent = ((index + 1) / totalSteps) * 100;
        $("#progress-step")
          .css("width", percent + "%")
          .attr("aria-valuenow", percent)
          .text(Math.round(percent) + "%");

        // Se estiver na Etapa 4 (índice 3), carrega as questões se ainda não estiverem
        if (index === 3 && allQuestoes.length === 0) {
          fetchQuestoes();
        }
        // Se estiver na Etapa 5 (revisão final), atualiza o resumo
        if (index === totalSteps - 1) {
          updateReviewFinal();
        }
      }

      $(".next").click(function () {
        var valid = true;
        var currentFieldset = fieldsets.eq(currentIndex);
        currentFieldset.find("select[required]").each(function () {
          if (
            !$(this).val() ||
            ($(this).attr("multiple") && $(this).val().length === 0)
          ) {
            valid = false;
            Swal.fire({
              icon: "warning",
              title: "Atenção",
              text: "Preencha os campos obrigatórios!",
            });
            return false;
          }
        });
        if (!valid) return false;

        if (currentIndex === 0) {
          var cursoId = $("#select-curso").val();
          if (!cursoId) {
            Swal.fire({
              icon: "warning",
              title: "Atenção",
              text: "Selecione um curso!",
            });
            return;
          }
          $.ajax({
            url: "/turmas-por-curso/" + cursoId,
            type: "GET",
            dataType: "json",
            success: function (data) {
              var $turmaSelect = $("#select-turma");
              $turmaSelect.empty();
              if (data.length > 0) {
                $turmaSelect.append(
                  '<option value="">Selecione uma turma</option>'
                );
                data.forEach(function (turma) {
                  $turmaSelect.append(
                    `<option value="${turma.id}">${turma.nome}</option>`
                  );
                });
              } else {
                $turmaSelect.append(
                  '<option value="">Nenhuma turma disponível</option>'
                );
              }
              var instance = $turmaSelect.data("choices");
              if (instance) {
                instance.destroy();
                $turmaSelect.removeData("choices");
              }
              new Choices($turmaSelect[0], { removeItemButton: false });
              currentIndex++;
              showStep(currentIndex);
            },
            error: function () {
              Swal.fire({
                icon: "error",
                title: "Erro",
                text: "Erro ao buscar turmas.",
              });
            },
          });
        } else {
          currentIndex++;
          if (currentIndex >= totalSteps) currentIndex = totalSteps - 1;
          showStep(currentIndex);
        }
      });

      $(".prev").click(function () {
        currentIndex--;
        if (currentIndex < 0) currentIndex = 0;
        showStep(currentIndex);
      });

      // Inicializa a primeira etapa e Choices.js para o select de curso
      showStep(currentIndex);
      new Choices("#select-curso", { removeItemButton: false });

      // Intercepta o submit do formulário para solicitar campos adicionais via modal
      $("#form-cadastrar-simulado").submit(function (e) {
        e.preventDefault(); // Impede o envio normal do formulário
        Swal.fire({
          title: "Informe os dados adicionais",
          html:
            "<div>" +
            '<label for="simpleinput" class="text-default-800 text-sm font-medium inline-block mb-2">Text</label>' +
            '<input type="text" id="simpleinput" class="block w-full rounded py-2.5 px-4 text-default-800 text-sm focus:ring-transparent border-default-200 dark:bg-default-50" placeholder="Descrição">' +
            "</div>" +
            '<div style="margin-top:1rem;">' +
            '<label for="example-time" class="text-default-800 text-sm font-medium inline-block mb-2">Time</label>' +
            '<input id="example-time" type="time" class="block w-full rounded py-2.5 px-4 text-default-800 text-sm focus:ring-transparent border-default-200 dark:bg-default-50" placeholder="Tempo de prova (HH:MM:SS)">' +
            "</div>",
          focusConfirm: false,
          preConfirm: () => {
            const descricao = $("#simpleinput").val().trim();
            const tempo = $("#example-time").val().trim();
            if (!descricao || !tempo) {
              Swal.showValidationMessage("Preencha ambos os campos");
            }
            // Se o input de tempo não contiver um traço, assume que é apenas o horário e concatena com a data atual
            let tempoFormatted = tempo;
            if (tempo.indexOf("-") === -1) {
              let today = new Date();
              let yyyy = today.getFullYear();
              let mm = String(today.getMonth() + 1).padStart(2, "0");
              let dd = String(today.getDate()).padStart(2, "0");
              tempoFormatted = `${yyyy}-${mm}-${dd} ${tempo}`;
            }
            return { descricao: descricao, tempo: tempoFormatted };
          },
          showCancelButton: true,
          confirmButtonText: "Confirmar",
          cancelButtonText: "Cancelar",
          confirmButtonColor: "#10b981",
          cancelButtonColor: "#d33",
        }).then((result) => {
          if (result.isConfirmed) {
            // Remove inputs hidden anteriores (se houver)
            $("#form-cadastrar-simulado input[name='tempo_prova']").remove();
            $("#form-cadastrar-simulado input[name='descricao']").remove();
            // Adiciona os novos campos ao formulário
            $("<input>")
              .attr({
                type: "hidden",
                name: "tempo_prova",
                value: result.value.tempo,
              })
              .appendTo("#form-cadastrar-simulado");
            $("<input>")
              .attr({
                type: "hidden",
                name: "descricao",
                value: result.value.descricao,
              })
              .appendTo("#form-cadastrar-simulado");

            // Envia o formulário via AJAX
            var formData = $(this).serialize();
            $.ajax({
              url: $(this).attr("action"),
              method: $(this).attr("method"),
              data: formData,
              dataType: "json",
              success: function (response) {
                if (response.success) {
                  Swal.fire({
                    icon: "success",
                    title: "Simulado cadastrado com sucesso!",
                    text: response.message,
                    timer: 2000,
                    showConfirmButton: false,
                  }).then(function () {
                    window.location.href = "/simulados";
                  });
                } else {
                  Swal.fire({
                    icon: "error",
                    title: "Erro",
                    text: response.error,
                  });
                }
              },
              error: function () {
                Swal.fire({
                  icon: "error",
                  title: "Erro",
                  text: "Ocorreu um erro ao cadastrar o simulado.",
                });
              },
            });
          }
        });
      });
    });

    // Ativação do simulado via checkbox
    $(document).on("change", ".ativar-simulado", function () {
      var checkbox = $(this);
      // Se o checkbox for marcado (tentativa de ativação)
      if (checkbox.is(":checked")) {
        Swal.fire({
          title: "Atenção",
          text: "Esta operação não poderá ser desfeita! Deseja prosseguir para ativar este simulado?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Sim, ativar",
          cancelButtonText: "Cancelar",
          confirmButtonColor: "#10b981",
          cancelButtonColor: "#d33",
        }).then((result) => {
          if (result.isConfirmed) {
            var simuladoId = checkbox.data("id");
            // Envia requisição AJAX para ativar o simulado
            $.ajax({
              url: "/ativar-simulado/" + simuladoId,
              method: "PUT",
              dataType: "json",
              success: function (response) {
                if (response.success) {
                  Swal.fire({
                    icon: "success",
                    title: "Simulado ativado!",
                    text: response.message,
                    timer: 2000,
                    showConfirmButton: false,
                  });
                  // Desabilita o checkbox para não permitir alteração
                  checkbox.prop("disabled", true);
                } else {
                  Swal.fire({
                    icon: "error",
                    title: "Erro",
                    text: response.error,
                  });
                  checkbox.prop("checked", false);
                }
              },
              error: function () {
                Swal.fire({
                  icon: "error",
                  title: "Erro",
                  text: "Não foi possível ativar o simulado.",
                });
                checkbox.prop("checked", false);
              },
            });
          } else {
            // Se cancelar, reverte o checkbox
            checkbox.prop("checked", false);
          }
        });
      }
    });

    $(document).ready(function () {
      var currentPath = window.location.pathname;
      $(".admin-menu a").each(function () {
        var linkPath = $(this).attr("href");
        if (currentPath === linkPath || currentPath.indexOf(linkPath) === 0) {
          $(this).addClass("active");
        }
      });
    });

    $("#aluno-search").on("keyup", function () {
      var query = $(this).val().toLowerCase();
      $("#aluno-table-body tr").each(function () {
        var idText = $(this).find("td:nth-child(2)").text().toLowerCase();
        var nomeText = $(this).find("td:nth-child(3)").text().toLowerCase();
        var usuarioText = $(this).find("td:nth-child(4)").text().toLowerCase();
        if (
          idText.indexOf(query) > -1 ||
          nomeText.indexOf(query) > -1 ||
          usuarioText.indexOf(query) > -1
        ) {
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    });
  </script>
</html>
